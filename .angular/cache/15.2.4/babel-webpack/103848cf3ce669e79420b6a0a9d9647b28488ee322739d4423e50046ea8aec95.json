{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BugService {\n  // Remove the connection code from the constructor\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api/bugs';\n    // Do not connect to MongoDB here\n    // Create a Mongoose model for Bug using the schema\n    const BugPost = require('../../backend/models/bug');\n    // model<Bug>('Bug', bugSchema);\n  }\n\n  getBugs() {\n    return this.http.get(this.apiUrl);\n  }\n  getBug(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get(url);\n  }\n  addBug(bug) {\n    return this.http.post(this.apiUrl, bug);\n  }\n  updateBug(id, bug) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.put(url, bug);\n  }\n  deleteBug(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete(url);\n  }\n}\nBugService.ɵfac = function BugService_Factory(t) {\n  return new (t || BugService)(i0.ɵɵinject(i1.HttpClient));\n};\nBugService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BugService,\n  factory: BugService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAUA,OAAM,MAAOA,UAAU;EAGrB;EAEAC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,gCAAgC;IAK/C;IACA;IACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,0BAA0B,CAAC;IACnD;EACF;;EAEAC,OAAO;IACL,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAQ,IAAI,CAACC,MAAM,CAAC;EAC1C;EAEAC,MAAM,CAACC,EAAU;IACf,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,IAAIE,EAAE,EAAE;IAClC,OAAO,IAAI,CAACP,IAAI,CAACI,GAAG,CAAMI,GAAG,CAAC;EAChC;EAEAC,MAAM,CAACC,GAAQ;IACb,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAM,IAAI,CAACN,MAAM,EAAEK,GAAG,CAAC;EAC9C;EAEAE,SAAS,CAACL,EAAU,EAAEG,GAAQ;IAC5B,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,IAAIE,EAAE,EAAE;IAClC,OAAO,IAAI,CAACP,IAAI,CAACa,GAAG,CAAML,GAAG,EAAEE,GAAG,CAAC;EACrC;EAEAI,SAAS,CAACP,EAAU;IAClB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,IAAIE,EAAE,EAAE;IAClC,OAAO,IAAI,CAACP,IAAI,CAACe,MAAM,CAAMP,GAAG,CAAC;EACnC;;AAjCWV,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAkB,SAAVlB,UAAU;EAAAmB,YAFT;AAAM","names":["BugService","constructor","http","BugPost","require","getBugs","get","apiUrl","getBug","id","url","addBug","bug","post","updateBug","put","deleteBug","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Kobe\\Documents\\GitHub\\WDD430\\final\\bug-tracker\\src\\app\\bug.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Bug } from './bug.model';\nimport { model } from 'mongoose';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BugService {\n  private apiUrl = 'http://localhost:3000/api/bugs';\n\n  // Remove the connection code from the constructor\n\n  constructor(private http: HttpClient) {\n    // Do not connect to MongoDB here\n    // Create a Mongoose model for Bug using the schema\n    const BugPost = require('../../backend/models/bug');\n    // model<Bug>('Bug', bugSchema);\n  }\n\n  getBugs(): Observable<Bug[]> {\n    return this.http.get<Bug[]>(this.apiUrl);\n  }\n\n  getBug(id: string): Observable<Bug> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get<Bug>(url);\n  }\n\n  addBug(bug: Bug): Observable<Bug> {\n    return this.http.post<Bug>(this.apiUrl, bug);\n  }\n\n  updateBug(id: string, bug: Bug): Observable<Bug> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.put<Bug>(url, bug);\n  }\n\n  deleteBug(id: string): Observable<Bug> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete<Bug>(url);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}