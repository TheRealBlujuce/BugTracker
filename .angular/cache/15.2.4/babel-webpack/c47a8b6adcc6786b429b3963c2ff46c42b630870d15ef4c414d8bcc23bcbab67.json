{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BugService = /*#__PURE__*/(() => {\n  class BugService {\n    constructor(http) {\n      this.http = http;\n      this.bugposts = [];\n      this.bugChangedEvent = new Subject();\n      this.apiUrl = \"https://wdd430-b4295-default-rtdb.firebaseio.com/bugs.json\";\n      this.getBugs();\n    }\n    getBugs() {\n      this.http.get(this.apiUrl).pipe(catchError(error => {\n        console.error(error);\n        // Optionally, you can return a default value or throw a custom error here\n        return [];\n      })).subscribe(bugs => {\n        this.bugposts = bugs;\n        this.bugChangedEvent.next(this.bugposts);\n        // Perform any other operations with the data here\n      });\n    }\n\n    storeData(bugs) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      this.http.put(this.apiUrl, JSON.stringify(bugs), {\n        headers\n      }).subscribe(() => {\n        this.bugChangedEvent.next(this.bugposts);\n      });\n    }\n    deleteBug(bug) {\n      if (!bug) {\n        return;\n      }\n      const pos = this.bugposts.indexOf(bug);\n      if (pos < 0) {\n        return;\n      }\n      let bugListClone = this.bugposts.splice(pos, 1);\n      this.storeData(bugListClone);\n    }\n    addBug(newBug) {\n      if (newBug == undefined || newBug == null) {\n        return;\n      }\n      this.bugposts.push(newBug);\n      let bugListClone = this.bugposts;\n      this.storeData(bugListClone);\n    }\n    updateBug(ogBug, newBug) {\n      if ((ogBug || newBug) == undefined || (ogBug || newBug) == null) {\n        return;\n      }\n      let pos = this.bugposts.indexOf(ogBug);\n      if (pos < 0) {\n        return;\n      }\n      newBug.id = ogBug.id;\n      this.bugposts[pos] = newBug;\n      let bugListClone = this.bugposts;\n      this.storeData(bugListClone);\n    }\n  }\n  BugService.ɵfac = function BugService_Factory(t) {\n    return new (t || BugService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  BugService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BugService,\n    factory: BugService.ɵfac,\n    providedIn: 'root'\n  });\n  return BugService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}